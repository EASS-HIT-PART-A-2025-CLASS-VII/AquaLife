services:
  react-nginx-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: react-nginx-frontend
    ports:
      - "80:80"
      - "443:443"
    networks:
      - aqualife-network
      - ai_network
    depends_on:
      - fastapi-backend
      - ai-service
    environment:
      - COMPOSE_BAKE=true
    volumes:
      - ./ssl/certbot/conf:/etc/letsencrypt
      - ./ssl/certbot/www:/var/www/certbot
    restart: unless-stopped
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./ssl/certbot/conf:/etc/letsencrypt
      - ./ssl/certbot/www:/var/www/certbot
    depends_on:
      - react-nginx-frontend
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    restart: unless-stopped

  fastapi-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fastapi-backend
    ports:
      - "8000:8000"
    networks:
      - aqualife-network
    depends_on:
      - postgres
    env_file:  
      - .env
    environment:
      - COMPOSE_BAKE=true

  postgres:
    image: postgres:13
    container_name: postgres-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - aqualife-network

  ai-service:
    build:
      context: ./ai_service
      dockerfile: Dockerfile
    container_name: ai-service
    ports:
      - "8001:8001"
    networks:
      - ai_network
    env_file:
      - .env
    environment:
      - COMPOSE_BAKE=true

networks:
  aqualife-network:
    driver: bridge
  ai_network:
    driver: bridge

volumes:
  postgres-data:
  ssl-certs: 